# Generated by Django 4.0.4 on 2022-05-28 12:28

import core.models.fields
import deform.db.models.fields.fields
import deform.db.models.fields.files
import deform.db.models.fields.json
import deform.db.models.fields.related
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import pyamgmt.models.models
import pyamgmt.validators
import re


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('name', deform.db.models.fields.fields.CharField(max_length=255, unique=True)),
                ('subtype', deform.db.models.fields.fields.CharField(choices=[('ASSET', 'ASSET'), ('LIABILITY', 'LIABILITY'), ('EQUITY', 'EQUITY'), ('INCOME', 'INCOME'), ('EXPENSE', 'EXPENSE'), ('OTHER', 'OTHER')], default='OTHER', max_length=31)),
                ('parent_account', deform.db.models.fields.related.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_accounts', to='pyamgmt.account')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Asset',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('description', deform.db.models.fields.fields.TextField(blank=True, null=True)),
                ('subtype', deform.db.models.fields.fields.CharField(choices=[('DISCRETE', 'DISCRETE'), ('INVENTORY', 'INVENTORY')], max_length=31)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('title', deform.db.models.fields.fields.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BookEdition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('edition', deform.db.models.fields.fields.PositiveSmallIntegerField()),
                ('book', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.book')),
            ],
        ),
        migrations.CreateModel(
            name='CatalogItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('asin', core.models.fields.UpperCharField(blank=True, max_length=10, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(10), django.core.validators.RegexValidator(code='invalid', message='Only alphanumeric characters allowed.', regex=re.compile('^[0-9a-zA-Z]*\\Z'))])),
                ('ean_13', deform.db.models.fields.fields.CharField(blank=True, max_length=13, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(13), django.core.validators.RegexValidator(code='invalid', message='Enter a valid digit.', regex=re.compile('^\\d+\\Z'))])),
                ('eav', deform.db.models.fields.json.JSONField(blank=True, null=True)),
                ('isbn', deform.db.models.fields.fields.CharField(blank=True, max_length=10, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(10), django.core.validators.RegexValidator(code='invalid', message='ISBN may only contain digits and "X".', regex=re.compile('^[0-9xX]+\\Z'))])),
                ('isbn_13', deform.db.models.fields.fields.CharField(blank=True, max_length=13, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(13), django.core.validators.RegexValidator(code='invalid', message='Enter a valid digit.', regex=re.compile('^\\d+\\Z')), pyamgmt.validators.validate_isbn_13_check_digit])),
                ('name', deform.db.models.fields.fields.CharField(max_length=255)),
                ('subtype', deform.db.models.fields.fields.CharField(blank=True, choices=[('DIGITAL_SONG', 'DIGITAL_SONG'), ('MUSIC_ALBUM', 'MUSIC_ALBUM')], max_length=31, null=True)),
                ('upc_a', deform.db.models.fields.fields.CharField(blank=True, max_length=12, null=True, unique=True, validators=[django.core.validators.MinLengthValidator(12), django.core.validators.RegexValidator(code='invalid', message='Enter a valid digit.', regex=re.compile('^\\d+\\Z'))])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('invoice_date', deform.db.models.fields.fields.DateField()),
                ('invoice_number', deform.db.models.fields.fields.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InvoiceLineItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('subtype', deform.db.models.fields.fields.CharField(choices=[('CATALOGUE_ITEM', 'CATALOGUE_ITEM'), ('NON_CATALOGUE_ITEM', 'NON_CATALOGUE_ITEM')], max_length=31)),
                ('invoice', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.invoice')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MediaFormat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('name', deform.db.models.fields.fields.CharField(max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MotionPicture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('title', deform.db.models.fields.fields.CharField(max_length=255)),
                ('year_produced', deform.db.models.fields.fields.PositiveSmallIntegerField(blank=True, null=True, validators=[pyamgmt.validators.validate_year_not_future])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MusicAlbum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('is_compilation', deform.db.models.fields.fields.BooleanField(default=False, help_text='Album is a compilation of other songs, such as a Greatest Hits album.')),
                ('title', deform.db.models.fields.fields.CharField(max_length=255, unique=True)),
                ('total_discs', deform.db.models.fields.fields.PositiveSmallIntegerField(default=1)),
                ('year_copyright', deform.db.models.fields.fields.PositiveSmallIntegerField(blank=True, null=True, validators=[pyamgmt.validators.validate_year_not_future])),
                ('year_produced', deform.db.models.fields.fields.PositiveSmallIntegerField(blank=True, null=True, validators=[pyamgmt.validators.validate_year_not_future])),
                ('mediaformat', deform.db.models.fields.related.ForeignKey(default=pyamgmt.models.models.get_default_mediaformat_audio, on_delete=django.db.models.deletion.SET_DEFAULT, to='pyamgmt.mediaformat')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MusicArtist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('name', deform.db.models.fields.fields.CharField(max_length=255, unique=True)),
                ('website', deform.db.models.fields.fields.URLField(blank=True, help_text='Website or homepage for this music artist.', null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MusicArtistToPerson',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('musicartist', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.musicartist')),
            ],
        ),
        migrations.CreateModel(
            name='MusicArtistToSong',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('musicartist', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.musicartist')),
            ],
        ),
        migrations.CreateModel(
            name='MusicArtistToSongRecording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('musicartist', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.musicartist')),
            ],
        ),
        migrations.CreateModel(
            name='NonCatalogItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('name', deform.db.models.fields.fields.CharField(max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('order_date', deform.db.models.fields.fields.DateField()),
                ('order_number', deform.db.models.fields.fields.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrderLineItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('subtype', deform.db.models.fields.fields.CharField(choices=[('CATALOGUE_ITEM', 'CATALOGUE_ITEM'), ('NON_CATALOGUE_ITEM', 'NON_CATALOGUE_ITEM')], max_length=31)),
                ('order', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.order')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Party',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('name', deform.db.models.fields.fields.CharField(max_length=255)),
                ('subtype', deform.db.models.fields.fields.CharField(choices=[('COMPANY', 'COMPANY'), ('PERSON', 'PERSON')], max_length=31)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Payee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('memo', deform.db.models.fields.fields.TextField(blank=True, null=True)),
                ('name', deform.db.models.fields.fields.CharField(help_text='Name as displayed on transaction ledger.', max_length=255, unique=True)),
                ('party', deform.db.models.fields.related.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.party')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('first_name', deform.db.models.fields.fields.CharField(max_length=255)),
                ('middle_name', deform.db.models.fields.fields.CharField(blank=True, max_length=255, null=True)),
                ('last_name', deform.db.models.fields.fields.CharField(max_length=255)),
                ('date_of_birth', deform.db.models.fields.fields.DateField(blank=True, null=True)),
                ('date_of_death', deform.db.models.fields.fields.DateField(blank=True, null=True)),
                ('subtype_acquaintance', deform.db.models.fields.fields.BooleanField()),
                ('subtype_notable', deform.db.models.fields.fields.BooleanField()),
                ('notes', deform.db.models.fields.fields.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PointOfSale',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('barcode', deform.db.models.fields.fields.CharField(blank=True, max_length=255, null=True)),
                ('point_of_sale_date', deform.db.models.fields.fields.DateField()),
                ('point_of_sale_time', deform.db.models.fields.fields.TimeField(blank=True, null=True)),
                ('party', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.party')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PointOfSaleLineItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('short_memo', deform.db.models.fields.fields.CharField(max_length=255, null=True)),
                ('subtype', deform.db.models.fields.fields.CharField(choices=[('CATALOGUE_ITEM', 'CATALOGUE_ITEM'), ('NON_CATALOGUE_ITEM', 'NON_CATALOGUE_ITEM')], max_length=31)),
                ('pointofsale', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='line_items', to='pyamgmt.pointofsale')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Seller',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('name', deform.db.models.fields.fields.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Song',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('lyrics', deform.db.models.fields.fields.TextField(blank=True, default='')),
                ('title', deform.db.models.fields.fields.CharField(max_length=255)),
                ('musicartists', deform.db.models.fields.related.ManyToManyField(related_name='+', through='pyamgmt.MusicArtistToSong', to='pyamgmt.musicartist')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Txn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('memo', deform.db.models.fields.fields.TextField(blank=True, null=True)),
                ('ref_total', deform.db.models.fields.fields.DecimalField(blank=True, decimal_places=10, help_text='Total transaction amount reflected on statement.', max_digits=19, null=True, verbose_name='Reference Total')),
                ('txn_date', deform.db.models.fields.fields.DateField()),
                ('payee', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.payee')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('abbr', deform.db.models.fields.fields.CharField(max_length=15)),
                ('name', deform.db.models.fields.fields.CharField(max_length=63)),
                ('dimension', deform.db.models.fields.fields.CharField(choices=[('AREA', 'AREA'), ('CURRENT', 'CURRENT'), ('LENGTH', 'LENGTH'), ('LIGHT', 'LIGHT'), ('MASS', 'MASS'), ('MATTER', 'MATTER'), ('TEMPERATURE', 'TEMPERATURE'), ('TIME', 'TIME'), ('VOLUME', 'VOLUME')], max_length=15, null=True)),
                ('system', deform.db.models.fields.fields.CharField(choices=[('SI', 'SI'), ('US', 'US')], max_length=2, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('vin', core.models.fields.UpperCharField(max_length=17, unique=True, validators=[django.core.validators.MinLengthValidator(11)])),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VehicleMake',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('name', deform.db.models.fields.fields.CharField(help_text='Make/Brand/Marque', max_length=255, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VehicleModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('name', deform.db.models.fields.fields.CharField(help_text='Model name, such as 3000GT, Forte, Supra', max_length=255)),
                ('vehiclemake', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.vehiclemake')),
            ],
        ),
        migrations.CreateModel(
            name='VehicleService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('date_in', deform.db.models.fields.fields.DateField()),
                ('date_out', deform.db.models.fields.fields.DateField(blank=True, null=True)),
                ('mileage_in', deform.db.models.fields.fields.IntegerField()),
                ('mileage_out', deform.db.models.fields.fields.IntegerField()),
                ('vehicle', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.vehicle')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VehicleTrim',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('name', deform.db.models.fields.fields.CharField(help_text='Trim Level, such as EX, GT, SS', max_length=255)),
                ('vehiclemodel', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.vehiclemodel')),
            ],
        ),
        migrations.CreateModel(
            name='AccountAsset',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('account', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.account')),
                ('subtype', deform.db.models.fields.fields.CharField(choices=[('FINANCIAL', 'FINANCIAL'), ('REAL', 'REAL'), ('OTHER', 'OTHER')], default='OTHER', max_length=31)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccountEquity',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('account', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.account')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccountExpense',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('account', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.account')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccountIncome',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('account', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.account')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccountLiability',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('account', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.account')),
                ('account_number', deform.db.models.fields.fields.CharField(blank=True, max_length=63, null=True)),
                ('subtype', deform.db.models.fields.fields.CharField(choices=[('SECURED', 'SECURED'), ('OTHER', 'OTHER')], default='OTHER', max_length=15)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssetDiscrete',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('asset', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.asset')),
                ('date_acquired', deform.db.models.fields.fields.DateField(blank=True, null=True)),
                ('date_withdrawn', deform.db.models.fields.fields.DateField(blank=True, null=True)),
                ('subtype', deform.db.models.fields.fields.CharField(choices=[('CATALOG_ITEM', 'CATALOG_ITEM'), ('VEHICLE', 'VEHICLE')], default='NONE', max_length=31)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssetInventory',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('asset', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.asset')),
                ('quantity', deform.db.models.fields.fields.IntegerField(default=1)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CatalogItemDigitalSong',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('catalogitem', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.catalogitem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CatalogItemMusicAlbum',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('catalogitem', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.catalogitem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CatalogItemToInvoiceLineItem',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('invoicelineitem', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.invoicelineitem')),
                ('unit_price', deform.db.models.fields.fields.DecimalField(decimal_places=10, max_digits=19)),
                ('quantity', deform.db.models.fields.fields.IntegerField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CatalogItemToOrderLineItem',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('orderlineitem', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.orderlineitem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CatalogItemToPointOfSaleLineItem',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('pointofsalelineitem', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.pointofsalelineitem')),
                ('quantity', deform.db.models.fields.fields.DecimalField(decimal_places=10, default=1, max_digits=19)),
                ('unit_price', deform.db.models.fields.fields.DecimalField(decimal_places=10, max_digits=19)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='InvoiceLineItemToNonCatalogItem',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('invoicelineitem', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.invoicelineitem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartyCompany',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('party', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.party')),
                ('trade_name', deform.db.models.fields.fields.CharField(max_length=255)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartyPerson',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('party', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.party')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VehicleYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('year', deform.db.models.fields.fields.IntegerField(help_text='Production year', validators=[django.core.validators.MinValueValidator(1886), pyamgmt.validators.validate_year_not_future])),
                ('vehicletrim', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.vehicletrim')),
            ],
        ),
        migrations.CreateModel(
            name='VehicleServiceItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('description', deform.db.models.fields.fields.CharField(max_length=255)),
                ('vehicleservice', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.vehicleservice')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='VehicleMileage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('odometer_date', deform.db.models.fields.fields.DateField(help_text='Date on which this odometer reading was captured', validators=[pyamgmt.validators.validate_date_not_future])),
                ('odometer_miles', deform.db.models.fields.fields.PositiveIntegerField(help_text='Odometer reading in miles')),
                ('odometer_time', deform.db.models.fields.fields.TimeField(blank=True, help_text='Time of this reading, if available', null=True)),
                ('vehicle', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.vehicle')),
            ],
        ),
        migrations.AddField(
            model_name='vehicle',
            name='vehicleyear',
            field=deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.vehicleyear'),
        ),
        migrations.CreateModel(
            name='TxnLineItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('amount', deform.db.models.fields.fields.DecimalField(decimal_places=10, max_digits=19)),
                ('debit', deform.db.models.fields.fields.BooleanField(default=False)),
                ('memo', deform.db.models.fields.fields.TextField(blank=True, null=True)),
                ('account', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.account')),
                ('txn', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='line_items', to='pyamgmt.txn')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SongToSong',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('song_relationship', deform.db.models.fields.fields.CharField(choices=[('ARRANGEMENT', 'Arrangement'), ('COVER', 'Cover'), ('INSTRUMENTAL', 'Instrumental'), ('OVERTURE', 'Overture'), ('MASHUP', 'Mash-up'), ('REMIX', 'Remix')], max_length=15)),
                ('song_derivative', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='pyamgmt.song')),
                ('song_original', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='pyamgmt.song')),
            ],
        ),
        migrations.CreateModel(
            name='SongRecording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('duration', deform.db.models.fields.fields.DurationField(blank=True, null=True, validators=[pyamgmt.validators.validate_positive_timedelta])),
                ('lyrics', deform.db.models.fields.fields.TextField(blank=True, default='')),
                ('recording_type', deform.db.models.fields.fields.CharField(choices=[('LIVE', 'Live Performance'), ('STUDIO', 'Studio Recording')], default='STUDIO', max_length=6)),
                ('musicartists', deform.db.models.fields.related.ManyToManyField(related_name='+', through='pyamgmt.MusicArtistToSongRecording', to='pyamgmt.musicartist')),
                ('song', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.song')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PointOfSaleToTxn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('pointofsale', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.pointofsale')),
                ('txn', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.txn')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PointOfSaleDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('document', deform.db.models.fields.files.FileField(upload_to='')),
                ('pointofsale', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.pointofsale')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='pointofsale',
            name='txn',
            field=deform.db.models.fields.related.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pyamgmt.txn'),
        ),
        migrations.CreateModel(
            name='PartyType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('name', deform.db.models.fields.fields.CharField(max_length=255)),
                ('parent_partytype', deform.db.models.fields.related.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_party_types', to='pyamgmt.partytype')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='party',
            name='partytype',
            field=deform.db.models.fields.related.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pyamgmt.partytype'),
        ),
        migrations.AddField(
            model_name='musicartisttosongrecording',
            name='songrecording',
            field=deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.songrecording'),
        ),
        migrations.AddField(
            model_name='musicartisttosong',
            name='song',
            field=deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.song'),
        ),
        migrations.CreateModel(
            name='MusicArtistToPersonActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('date_active', deform.db.models.fields.fields.DateField(validators=[pyamgmt.validators.validate_date_not_future])),
                ('date_inactive', deform.db.models.fields.fields.DateField(blank=True, null=True, validators=[pyamgmt.validators.validate_date_not_future])),
                ('musicartisttoperson', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.musicartisttoperson')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='musicartisttoperson',
            name='person',
            field=deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.person'),
        ),
        migrations.CreateModel(
            name='MusicArtistActivity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('year_active', deform.db.models.fields.fields.PositiveSmallIntegerField(validators=[pyamgmt.validators.validate_year_not_future])),
                ('year_inactive', deform.db.models.fields.fields.PositiveSmallIntegerField(blank=True, null=True, validators=[pyamgmt.validators.validate_year_not_future])),
                ('musicartist', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.musicartist')),
            ],
        ),
        migrations.AddField(
            model_name='musicartist',
            name='songs',
            field=deform.db.models.fields.related.ManyToManyField(blank=True, related_name='+', through='pyamgmt.MusicArtistToSong', to='pyamgmt.song'),
        ),
        migrations.CreateModel(
            name='MusicAlbumToSongRecording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('disc_number', deform.db.models.fields.fields.PositiveSmallIntegerField(blank=True, null=True)),
                ('track_number', deform.db.models.fields.fields.PositiveSmallIntegerField(blank=True, null=True)),
                ('musicalbum', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.musicalbum')),
                ('songrecording', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.songrecording')),
            ],
        ),
        migrations.CreateModel(
            name='MusicAlbumToMusicArtist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('musicalbum', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.musicalbum')),
                ('musicartist', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.musicartist')),
            ],
        ),
        migrations.CreateModel(
            name='MusicAlbumArtwork',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('image', deform.db.models.fields.files.ImageField(upload_to='')),
                ('musicalbum', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.musicalbum')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='musicalbum',
            name='musicartists',
            field=deform.db.models.fields.related.ManyToManyField(blank=True, related_name='musicalbums', through='pyamgmt.MusicAlbumToMusicArtist', to='pyamgmt.musicartist'),
        ),
        migrations.AddField(
            model_name='musicalbum',
            name='songrecordings',
            field=deform.db.models.fields.related.ManyToManyField(blank=True, through='pyamgmt.MusicAlbumToSongRecording', to='pyamgmt.songrecording'),
        ),
        migrations.CreateModel(
            name='MotionPictureToMusicAlbum',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('motionpicture', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.motionpicture')),
                ('musicalbum', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.musicalbum')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MotionPictureRecording',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('motionpicture', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.motionpicture')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BookToMotionPicture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('book', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.book')),
                ('motionpicture', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.motionpicture')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BookPublication',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('bookedition', deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.bookedition')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssetType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('name', deform.db.models.fields.fields.CharField(max_length=255)),
                ('parent_asset_type', deform.db.models.fields.related.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_asset_types', to='pyamgmt.assettype')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccountAssetFinancial',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('accountasset', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.accountasset')),
                ('account_number', deform.db.models.fields.fields.CharField(blank=True, max_length=63, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccountAssetReal',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('accountasset', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.accountasset')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AccountLiabilitySecured',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('accountliability', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.accountliability')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssetDiscreteCatalogItem',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('assetdiscrete', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.assetdiscrete')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AssetDiscreteVehicle',
            fields=[
                ('timestamp_created', deform.db.models.fields.fields.DateTimeField(auto_now_add=True)),
                ('timestamp_modified', deform.db.models.fields.fields.DateTimeField(auto_now=True)),
                ('assetdiscrete', deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='pyamgmt.assetdiscrete')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddConstraint(
            model_name='vehicleyear',
            constraint=models.UniqueConstraint(fields=('vehicletrim', 'year'), name='unique_vehicleyear'),
        ),
        migrations.AddConstraint(
            model_name='vehicletrim',
            constraint=models.UniqueConstraint(fields=('name', 'vehiclemodel'), name='unique_vehicletrim'),
        ),
        migrations.AddConstraint(
            model_name='vehiclemodel',
            constraint=models.UniqueConstraint(fields=('name', 'vehiclemake'), name='unique_vehiclemodel'),
        ),
        migrations.AddConstraint(
            model_name='vehiclemileage',
            constraint=models.UniqueConstraint(fields=('vehicle', 'odometer_date', 'odometer_time'), name='unique_vehiclemileage'),
        ),
        migrations.AddConstraint(
            model_name='songtosong',
            constraint=models.UniqueConstraint(fields=('song_derivative', 'song_original'), name='unique_songtosong'),
        ),
        migrations.AddField(
            model_name='partyperson',
            name='person',
            field=deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.person'),
        ),
        migrations.AddConstraint(
            model_name='musicartisttosongrecording',
            constraint=models.UniqueConstraint(fields=('musicartist', 'songrecording'), name='unique_musicartisttosongrecording'),
        ),
        migrations.AddConstraint(
            model_name='musicartisttosong',
            constraint=models.UniqueConstraint(fields=('musicartist', 'song'), name='unique_musicartisttosong'),
        ),
        migrations.AddConstraint(
            model_name='musicartisttoperson',
            constraint=models.UniqueConstraint(fields=('musicartist', 'person'), name='unique_musicartisttoperson'),
        ),
        migrations.AddConstraint(
            model_name='musicartistactivity',
            constraint=models.UniqueConstraint(fields=('musicartist', 'year_active'), name='unique_musicartistactivity'),
        ),
        migrations.AddConstraint(
            model_name='musicalbumtosongrecording',
            constraint=models.UniqueConstraint(fields=('musicalbum', 'songrecording'), name='unique_musicalbumtosongrecording'),
        ),
        migrations.AddConstraint(
            model_name='musicalbumtosongrecording',
            constraint=models.UniqueConstraint(fields=('musicalbum', 'disc_number', 'track_number'), name='unique_musicalbumtosongrecording_disc_track'),
        ),
        migrations.AddConstraint(
            model_name='musicalbumtomusicartist',
            constraint=models.UniqueConstraint(fields=('musicalbum', 'musicartist'), name='unique_musicalbumtomusicartist'),
        ),
        migrations.AddField(
            model_name='invoicelineitemtononcatalogitem',
            name='noncatalogitem',
            field=deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='pyamgmt.noncatalogitem'),
        ),
        migrations.AddField(
            model_name='catalogitemtopointofsalelineitem',
            name='catalogitem',
            field=deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.catalogitem'),
        ),
        migrations.AddField(
            model_name='catalogitemtopointofsalelineitem',
            name='unit',
            field=deform.db.models.fields.related.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pyamgmt.unit'),
        ),
        migrations.AddField(
            model_name='catalogitemtoorderlineitem',
            name='catalogitem',
            field=deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.catalogitem'),
        ),
        migrations.AddField(
            model_name='catalogitemtoinvoicelineitem',
            name='catalogitem',
            field=deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.catalogitem'),
        ),
        migrations.AddField(
            model_name='catalogitemmusicalbum',
            name='mediaformat',
            field=deform.db.models.fields.related.ForeignKey(default=pyamgmt.models.models.get_default_mediaformat_audio, on_delete=django.db.models.deletion.SET_DEFAULT, to='pyamgmt.mediaformat'),
        ),
        migrations.AddConstraint(
            model_name='bookedition',
            constraint=models.UniqueConstraint(fields=('book', 'edition'), name='unique_bookedition'),
        ),
        migrations.AddField(
            model_name='assetinventory',
            name='catalogitem',
            field=deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.catalogitem'),
        ),
        migrations.AddField(
            model_name='assetdiscretevehicle',
            name='vehicle',
            field=deform.db.models.fields.related.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.vehicle'),
        ),
        migrations.AddField(
            model_name='assetdiscretecatalogitem',
            name='catalogitem',
            field=deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.catalogitem'),
        ),
        migrations.AddField(
            model_name='accountliabilitysecured',
            name='asset',
            field=deform.db.models.fields.related.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='pyamgmt.asset'),
        ),
        migrations.AddField(
            model_name='accountassetreal',
            name='asset',
            field=deform.db.models.fields.related.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='pyamgmt.asset'),
        ),
    ]
